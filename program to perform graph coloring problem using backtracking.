def graphColoring(graph, m, n):
    # Initialize the colors to be a list of 0s
    colors = [0] * n
    # Define a helper function to check if the current solution is valid
    def isValid(v, ic):
        # Iterate over the neighbors of the current vertex
        for i in graph[v]:
            # Check if the color of the current neighbor is the same as the current color
            if colors[i] == ic:
                return False
        # If the current solution is valid, return True
        return True

    # Define a helper function to find a coloring solution
    def findColor(v):
        # If the current vertex has been colored, try to find a coloring solution for the next vertex
        if v == n:
            return True
        # Iterate over the possible colors
        for i in range(1, m + 1):
            # Check if the current solution is valid
            if isValid(v, i):
                # Color the current vertex with the current color
                colors[v] = i
                # Try to find a coloring solution for the next vertex
                if findColor(v + 1):
                    return True
                # If the function returns False, remove the color from the current vertex
                colors[v] = 0
        # If the function returns False, the current vertex cannot be colored
        return False

    # Find a coloring solution for the graph
    if findColor(0):
        # Print the coloring solution
        for i in range(n):
            print("Vertex {} is colored with color {}".format(i, colors[i]))
    else:
        # If the function returns False, print that there is no coloring solution
        print("No coloring solution")

# Test the function
graph = [[1, 2, 3], [0, 2, 3, 4], [0, 1, 3], [1, 2], [0, 2]]
m = 3
n = 5
graphColoring(graph, m, n)
