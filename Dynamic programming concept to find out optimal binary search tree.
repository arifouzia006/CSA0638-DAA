# Returns the minimum total cost of a binary search tree
def optBST(root, f, n):
    if n == 0 or n == 1:
        return 0
    if (n <= root):
        return n * f[root]
    else:
        return (n * f[root] + optBST(root - 1, f, n) + optBST(root, f, n - root))

# Returns the minimum total cost of an optimal binary search tree
def minTotalCost(f, n):
    # Initialize a table to store the minimum cost
    dp = [[0 for x in range(n + 1)] for y in range(n + 1)]
    # Fill the table using bottom-up approach
    for i in range(n + 1):
        for j in range(i + 1):
            if i == 1:
                dp[i][j] = j * f[i]
            else:
                dp[i][j] = 1000000000
                for k in range(j, i + 1):
                    dp[i][j] = min(dp[i][j], dp[i - 1][j] + dp[i - 1][k] + (k - j + 1) * f[i])
    # Return the minimum cost
    return dp[n][1]

# Test the function
f = [0.04, 0.03, 0.02, 0.01]
n = len(f)
print(minTotalCost(f, n))
